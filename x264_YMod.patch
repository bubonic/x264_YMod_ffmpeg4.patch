--- libavcodec/libx264.c	2018-09-25 20:20:46.319365340 -0500
+++ /home/bubonic/Builds/FFmpeg/libavcodec/libx264.c	2018-10-20 23:05:57.875089617 -0500
@@ -50,6 +50,7 @@
     char *preset;
     char *tune;
     char *profile;
+    char *device;
     char *level;
     int fastfirstpass;
     char *wpredp;
@@ -58,7 +59,26 @@
     float crf_max;
     int cqp;
     int aq_mode;
+    int fgo;
+    int aq2_mode;
+    int aq3_mode;
+    char *aq3_boundary;
+    float aq3_strength;
+    float aq3_sensitivity;
+    float aq2_strength;
+    float aq2_sensitivity;
+    char *aq3_ifactor;
+    char *aq3_pfactor;
+    char *aq3_bfactor;
+    float aq2_ifactor;
+    float aq2_pfactor;
+    float aq2_bfactor;
+    float aq_sensitivity;
     float aq_strength;
+    float aq_ifactor;
+    float aq_pfactor;
+    float aq_bfactor;
+    float fade_compensate;
     char *psy_rd;
     int psy;
     int rc_lookahead;
@@ -631,8 +651,52 @@
 
     if (x4->aq_mode >= 0)
         x4->params.rc.i_aq_mode = x4->aq_mode;
+    if (x4->aq2_mode >= 0)
+        x4->params.rc.b_aq2 = x4->aq2_mode;
+    if (x4->aq3_mode >= 0)
+        x4->params.rc.i_aq3_mode = x4->aq3_mode;
     if (x4->aq_strength >= 0)
         x4->params.rc.f_aq_strength = x4->aq_strength;
+    if (x4->aq2_strength >=0)
+        x4->params.rc.f_aq2_strength = x4->aq2_strength;
+    if (x4->aq_sensitivity >=0)
+        x4->params.rc.f_aq_sensitivity = x4->aq_sensitivity;
+    if (x4->aq2_sensitivity >=0)
+        x4->params.rc.f_aq2_sensitivity = x4->aq2_sensitivity;
+    if (x4->aq3_strength >= 0)
+        x4->params.rc.f_aq3_strength = x4->aq3_strength;
+    if (x4->aq3_sensitivity >= 0)
+        x4->params.rc.f_aq3_sensitivity = x4->aq3_sensitivity;
+/*
+    if (x4->aq3_boundary[0] || x4->aq3_boundary[1] || x4->aq3_boundary[2])
+        x4->params.rc.i_aq3_boundary = x4->aq3_boundary;
+    if (x4->aq3_ifactor[0] || x4->aq3_ifactor[1])
+        x4->params.rc.f_aq3_ifactor = x4->aq3_ifactor;
+    if (x4->aq3_pfactor[0] || x4->aq3_pfactor[1])
+        x4->params.rc.f_aq3_pfactor = x4->aq3_pfactor;
+    if (x4->aq3_bfactor[0] || x4->aq3_bfactor[1])
+        x4->params.rc.f_aq3_bfactor = x4->aq3_bfactor;
+*/ 
+   if (x4->aq2_ifactor >= 0)
+        x4->params.rc.f_aq2_ifactor = x4->aq2_ifactor;
+    if (x4->aq2_pfactor >= 0)
+        x4->params.rc.f_aq2_pfactor = x4->aq2_pfactor;
+    if (x4->aq2_bfactor >= 0)
+        x4->params.rc.f_aq2_bfactor = x4->aq2_bfactor;
+    if (x4->aq_ifactor >= 0)
+        x4->params.rc.f_aq_ifactor = x4->aq_ifactor;
+    if (x4->aq_pfactor >= 0)
+        x4->params.rc.f_aq_pfactor = x4->aq_pfactor;
+    if (x4->aq_bfactor >= 0)
+        x4->params.rc.f_aq_bfactor = x4->aq_bfactor;
+    if (x4->fade_compensate >= 0)
+        x4->params.rc.f_fade_compensate = x4->fade_compensate;
+    if (x4->fgo >= 0)
+        x4->params.analyse.i_fgo = x4->fgo;
+    PARSE_X264_OPT("aq3-ifactor", aq3_ifactor);
+    PARSE_X264_OPT("aq3-bfactor", aq3_bfactor);
+    PARSE_X264_OPT("aq3-pfactor", aq3_pfactor);
+    PARSE_X264_OPT("aq3-boundary", aq3_boundary);
     PARSE_X264_OPT("psy-rd", psy_rd);
     PARSE_X264_OPT("deblock", deblock);
     PARSE_X264_OPT("partitions", partitions);
@@ -723,8 +787,9 @@
     if (x4->b_frame_strategy >= 0)
         x4->params.i_bframe_adaptive = x4->b_frame_strategy;
 
-    if (x4->profile)
-        if (x264_param_apply_profile(&x4->params, x4->profile) < 0) {
+
+    if (x4->profile || x4->device)
+        if (x264_param_apply_profile(&x4->params, x4->profile, x4->device) < 0) {
             int i;
             av_log(avctx, AV_LOG_ERROR, "Error setting profile %s.\n", x4->profile);
             av_log(avctx, AV_LOG_INFO, "Possible profiles:");
@@ -935,14 +1000,36 @@
     { "crf",           "Select the quality for constant quality mode",    OFFSET(crf),           AV_OPT_TYPE_FLOAT,  {.dbl = -1 }, -1, FLT_MAX, VE },
     { "crf_max",       "In CRF mode, prevents VBV from lowering quality beyond this point.",OFFSET(crf_max), AV_OPT_TYPE_FLOAT, {.dbl = -1 }, -1, FLT_MAX, VE },
     { "qp",            "Constant quantization parameter rate control method",OFFSET(cqp),        AV_OPT_TYPE_INT,    { .i64 = -1 }, -1, INT_MAX, VE },
+    { "fgo",            "Film Grain Optimization (add --fgo)",OFFSET(fgo),        AV_OPT_TYPE_INT,    { .i64 = -1 }, -1, INT_MAX, VE },
+    { "fade-compensate", "Fade Compensation", OFFSET(fade_compensate), AV_OPT_TYPE_FLOAT, {.dbl = -1}, -1, FLT_MAX, VE},
     { "aq-mode",       "AQ method",                                       OFFSET(aq_mode),       AV_OPT_TYPE_INT,    { .i64 = -1 }, -1, INT_MAX, VE, "aq_mode"},
     { "none",          NULL,                              0, AV_OPT_TYPE_CONST, {.i64 = X264_AQ_NONE},         INT_MIN, INT_MAX, VE, "aq_mode" },
-    { "variance",      "Variance AQ (complexity mask)",   0, AV_OPT_TYPE_CONST, {.i64 = X264_AQ_VARIANCE},     INT_MIN, INT_MAX, VE, "aq_mode" },
-    { "autovariance",  "Auto-variance AQ",                0, AV_OPT_TYPE_CONST, {.i64 = X264_AQ_AUTOVARIANCE}, INT_MIN, INT_MAX, VE, "aq_mode" },
+    { "variance",      "Variance AQ (complexity mask)",   0, AV_OPT_TYPE_CONST, {.i64 = X264_AQ_MIX},     INT_MIN, INT_MAX, VE, "aq_mode" },
+    { "autovariance",  "Auto-variance AQ",                0, AV_OPT_TYPE_CONST, {.i64 = X264_AQ_AUTOMIX}, INT_MIN, INT_MAX, VE, "aq_mode" },
 #if X264_BUILD >= 144
-    { "autovariance-biased", "Auto-variance AQ with bias to dark scenes", 0, AV_OPT_TYPE_CONST, {.i64 = X264_AQ_AUTOVARIANCE_BIASED}, INT_MIN, INT_MAX, VE, "aq_mode" },
+    { "autovariance-biased", "Auto-variance AQ with bias to dark scenes", 0, AV_OPT_TYPE_CONST, {.i64 = X264_AQ_AUTOMIX_BIASED}, INT_MIN, INT_MAX, VE, "aq_mode" },
 #endif
     { "aq-strength",   "AQ strength. Reduces blocking and blurring in flat and textured areas.", OFFSET(aq_strength), AV_OPT_TYPE_FLOAT, {.dbl = -1}, -1, FLT_MAX, VE},
+    { "aq2-strength",   "AQ 2 strength. Reduces blocking and blurring in flat and textured areas.", OFFSET(aq2_strength), AV_OPT_TYPE_FLOAT, {.dbl = -1}, -1, FLT_MAX, VE},
+    { "aq3-strength",   "AQ 3 strength. Reduces blocking and blurring in flat and textured areas.", OFFSET(aq3_strength), AV_OPT_TYPE_FLOAT, {.dbl = -1}, -1, FLT_MAX, VE},
+    { "aq-sensitivity", "Center of AQ curve", OFFSET(aq_sensitivity), AV_OPT_TYPE_FLOAT, {.dbl = -1}, -1, FLT_MAX, VE},
+    { "aq2-sensitivity", "Center of 2AQ curve", OFFSET(aq2_sensitivity), AV_OPT_TYPE_FLOAT, {.dbl = -1}, -1, FLT_MAX, VE},
+    { "aq3-sensitivity", "Center of 3AQ curve", OFFSET(aq3_sensitivity), AV_OPT_TYPE_FLOAT, {.dbl = -1}, -1, FLT_MAX, VE},
+    { "aq3-boundary",    "OreAQ boundary.", OFFSET(aq3_boundary), AV_OPT_TYPE_STRING,  {0 }, 0, 0, 0, VE},
+    { "aq-ifactor",   "2nd AQ strength factor of I-frames [1.00]", OFFSET(aq_ifactor), AV_OPT_TYPE_FLOAT, {.dbl = -1}, -1, FLT_MAX, VE},
+    { "aq-bfactor",   "2nd AQ strength factor of B-frames [1.00]", OFFSET(aq_bfactor), AV_OPT_TYPE_FLOAT, {.dbl = -1}, -1, FLT_MAX, VE},
+    { "aq-pfactor",   "2nd AQ strength factor of P-frames [1.00]", OFFSET(aq_pfactor), AV_OPT_TYPE_FLOAT, {.dbl = -1}, -1, FLT_MAX, VE},
+    { "aq2-ifactor",   "2nd AQ strength factor of I-frames [1.00]", OFFSET(aq2_ifactor), AV_OPT_TYPE_FLOAT, {.dbl = -1}, -1, FLT_MAX, VE},
+    { "aq2-bfactor",   "2nd AQ strength factor of B-frames [1.00]", OFFSET(aq2_bfactor), AV_OPT_TYPE_FLOAT, {.dbl = -1}, -1, FLT_MAX, VE},
+    { "aq2-pfactor",   "2nd AQ strength factor of P-frames [1.00]", OFFSET(aq2_pfactor), AV_OPT_TYPE_FLOAT, {.dbl = -1}, -1, FLT_MAX, VE},
+    { "aq3-ifactor",   "3rd AQ strength factor of I-frames [1.0:1.0]", OFFSET(aq3_ifactor), AV_OPT_TYPE_STRING, {0 }, 0, 0, VE},
+    { "aq3-bfactor",   "3rd AQ strength factor of B-frames [1.0:1.0]", OFFSET(aq3_bfactor), AV_OPT_TYPE_STRING, {0 }, 0, 0, VE},
+    { "aq3-pfactor",   "3rd AQ strength factor of P-frames [1.0:1.0]", OFFSET(aq3_ifactor), AV_OPT_TYPE_STRING, {0 }, 0, 0, VE},
+    { "aq2-mode",      "Use 2nd AQ (Haali's AQ) algorithm for support", OFFSET(aq2_mode), AV_OPT_TYPE_BOOL, {.i64 = 1}, 0, 1, VE, "aq2_mode"},
+    { "aq3-mode",      "3rd AQ (OreAQ) method", OFFSET(aq3_mode),       AV_OPT_TYPE_INT,    { .i64 = -1 }, -1, INT_MAX, VE, "aq3_mode"},
+    { "none",          NULL,                              0, AV_OPT_TYPE_CONST, {.i64 = X264_AQ_NONE},         INT_MIN, INT_MAX, VE, "aq3_mode" },
+    { "OreAQ",         "OreAQ mode",   0, AV_OPT_TYPE_CONST, {.i64 = X264_AQ_ORE},     INT_MIN, INT_MAX, VE, "aq3_mode" },
+    { "MixOre",         "MixOre mode (experimental)",   0, AV_OPT_TYPE_CONST, {.i64 = X264_AQ_MIXORE},     INT_MIN, INT_MAX, VE, "aq3_mode" },
     { "psy",           "Use psychovisual optimizations.",                 OFFSET(psy),           AV_OPT_TYPE_BOOL,   { .i64 = -1 }, -1, 1, VE },
     { "psy-rd",        "Strength of psychovisual optimization, in <psy-rd>:<psy-trellis> format.", OFFSET(psy_rd), AV_OPT_TYPE_STRING,  {0 }, 0, 0, VE},
     { "rc-lookahead",  "Number of frames to look ahead for frametype and ratecontrol", OFFSET(rc_lookahead), AV_OPT_TYPE_INT, { .i64 = -1 }, -1, INT_MAX, VE },
